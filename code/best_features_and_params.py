#! /usr/bin/python
# -*- coding: utf-8 -*-

import os
import glob
import cPickle as pickle
from ga_stuff import individual_fitness
from feature_selection_bottom_up import number_to_indices


def get_best_params_for_selectkbest(selectkbest_results_pickled):
    # https://stackoverflow.com/questions/44999289/print-feature-names-for-selectkbest-where-k-value-is-inside-param-grid-of-gridse
    with open(selectkbest_results_pickled) as f:
        selectkbest_results = pickle.load(f)
    scores = selectkbest_results.best_estimator_.steps[0][1].scores_
    p_values = selectkbest_results.best_estimator_.steps[0][1].pvalues_
    indices = [x[-1] for x in sorted(zip(scores, range(len(p_values))), reverse=True)]
    return sorted(indices[:selectkbest_results.best_params_['kbest__k']]), selectkbest_results.best_params_['svc__C']


def get_bottom_up(directory):
    # for name in glob.glob(os.path.join(directory, 'results.dump*')):
    #     print name, len(pickle.load(open(name)))
    names = glob.glob(os.path.join(directory, 'results.dump*'))
    best_name = max(names, key=lambda x: int(x.rsplit('_', 1)[1]))
    best_res = max(pickle.load(open(best_name)).items(), key=lambda x: individual_fitness(x[1]))
    # print individual_fitness(best_res[1])
    return number_to_indices(best_res[0])


def get_ga(directory, neighbours=None):
    names = glob.glob(os.path.join(directory, '*', '*'))
    if neighbours:
        neighbours = str(neighbours)
        names = [name for name in names if name.rsplit('_', 2)[-2] == neighbours]
    res = max([max(pickle.load(open(name)), key=lambda x: x.fitness) for name in names], key=lambda x: x.fitness)
    return [x for x in range(len(res)) if res[x]]


# LogisticRegression with lasso- feature selection
lasso_features = pickle.load(open(os.path.join('..', 'lr_res', 'best_features_LogisticRegression.dump')))
lasso_c = pickle.load(open(os.path.join('..', 'lr_res', 'best_C_LogisticRegression.dump')))[0]

# svm_RFE
svc_RFE_results = pickle.load(open(os.path.join('..', 'svm_res', 'RFE.dump')))
best_result = max(svc_RFE_results.items(), key=lambda item: item[1][0])
svc_RFE_best_features = [i for i, b in enumerate(best_result[1][1].support_) if b]
svc_RFE_best_C = best_result[1][1].estimator.C

# svm_SelectKBest
svc_SelectKBest_best_features, svc_RFE_SelectKBest_C = get_best_params_for_selectkbest(
    os.path.join('..', 'svm_res', 'grid_search.dump'))

# svm biogram
svc_biogram_best_features = pickle.load(open(os.path.join('..', 'svm_res', 'best_features_biogram.dump'), 'rb'))
svc_biogram_best_c = pickle.load(open(os.path.join('..', 'svm_res', 'best_C_biogram.dump'), 'rb'))

# penalized svm
svc_penalized_best_features = pickle.load(
    open(os.path.join('..', 'svm_res', 'best_features_penalizedSVM.dump'), 'rb'))
svc_penalized_best_c = pickle.load(open(os.path.join('..', 'svm_res', 'best_C_penalizedSVM.dump'), 'rb'))

# bottom up QDA
qda_bottomup_best_features = get_bottom_up(os.path.join('..', 'bottom_up_feature_selection_results_qda'))

# bottom up kNN
feats_bottomup_knn = {}
for i in range(1, 10, 2):
    feats_bottomup_knn[i] = get_bottom_up(os.path.join('..', 'bottom_up_feature_selection_results_knn_%d' % i))

# GA knn
names = glob.glob(os.path.join('..', 'ga_res', 'knn', '*', '*'))
ks = [int(name.rsplit('_', 2)[-2]) for name in names]
feats_ga_knn = {}
for k in sorted(set(ks)):
    feats_ga_knn[k] = get_ga(os.path.join('..', 'ga_res', 'knn'), k)
names = glob.glob(os.path.join('..', 'ga_res', 'knn_500', '*', '*'))
ks = [int(name.rsplit('_', 2)[-2]) for name in names]
feats_ga_knn_500 = {}
for k in sorted(set(ks)):
    feats_ga_knn_500[k] = get_ga(os.path.join('..', 'ga_res', 'knn_500'), k)

# GA qda
feats_ga_qda = get_ga(os.path.join('..', 'ga_res', 'qda'))
feats_ga_qda_500 = get_ga(os.path.join('..', 'ga_res', 'qda_500'))


# simple LogisticRegression 1.7058370026049265
# [0.80471537 0.13094322 0.94647732 0.05047953 0.89692308 0.07191199] ('0.8893517313513327', '0.9837241332975007', '0.944672131147541')
# --------------------------------------------------
# LogisticRegression with lasso- feature selection 1.7677625150295537
# [0.83908334 0.10589763 0.9634977  0.03337646 0.91538462 0.05806433] ('0.881214149649768', '0.9833546089760817', '0.9405737704918032')
# --------------------------------------------------
# simple svc 1.8093491863541005
# [0.80069186 0.12213433 0.93870874 0.05775479 0.89487179 0.06750947] ('0.8852459016393442', '0.9827499328137597', '0.9426229508196722')
# --------------------------------------------------
# simple kNN 1.7448691188459473
# [0.69691884 0.12717094 0.92739776 0.0603668  0.82974359 0.07835589] ('0.7937408962226535', '0.9565137059930126', '0.8934426229508197')
# --------------------------------------------------
# simple QDA 1.8721926915826441
# [0.85298974 0.12564471 0.96999606 0.03437058 0.92       0.07152697] ('0.7780545318566567', '0.953691883902177', '0.8872950819672131')
# --------------------------------------------------
# svm_RFE 1.8700939249285657
# [0.84707059 0.08402142 0.96517554 0.03245694 0.92051282 0.04534911] ('0.8524876545946632', '0.9809359043267939', '0.9262295081967213')
# --------------------------------------------------
# svm_SelectKBest 1.8434743699128584
# [0.82494944 0.09448447 0.95317817 0.04147185 0.90769231 0.05297215] ('0.877314466009143', '0.9842196318194034', '0.9385245901639344')
# --------------------------------------------------
# svm_biogram 1.848091584836812
# [0.8302313  0.08352212 0.95408284 0.04266656 0.91025641 0.04711255] ('0.8114754098360656', '0.9717649825315775', '0.9057377049180327')
# --------------------------------------------------
# svm_penalized 1.8405067210162038
# [0.81862072 0.09042821 0.95319921 0.04279729 0.90358974 0.05165505] ('0.8239435026742628', '0.973998925020156', '0.9118852459016393')
# --------------------------------------------------
# bottom up QDA 1.9488530051728667
# [0.94490988 0.03898014 0.98594346 0.0186915  0.97179487 0.02025479] ('0.8383498716702922', '0.9664572695511959', '0.9180327868852459')
# --------------------------------------------------
# bottom up kNN 1.8573549471052009
# [0.8833471  0.08106968 0.9374359  0.04648316 0.9374359  0.04648316] ('0.8984544500914721', '0.9487704918032787', '0.9487704918032787')
# --------------------------------------------------
# bottom up kNN 1.8900485589219091
# [0.879614   0.08713009 0.96751874 0.02554366 0.93538462 0.05033484] ('0.8567372739249797', '0.9558082504703036', '0.9282786885245902')
# --------------------------------------------------
# bottom up kNN 1.7942469452648981
# [0.75979126 0.16401616 0.9474188  0.05026187 0.86461538 0.10130509] ('0.7895420339517228', '0.9549600241870465', '0.8934426229508197')
# --------------------------------------------------
# bottom up kNN 1.899474418576683
# [0.87640392 0.0750631  0.97526101 0.01842267 0.93435897 0.04218241] ('0.877167055361037', '0.9784080220370868', '0.9385245901639344')
# --------------------------------------------------
# bottom up kNN 1.9048114088890247
# [0.8775582  0.0772424  0.97960026 0.01565062 0.93487179 0.04368316] ('0.873545260423432', '0.9811206664875034', '0.9364754098360656')
# --------------------------------------------------
# GA knn 100 1.862249192381513
# [0.88172892 0.06299493 0.93794872 0.03475849 0.93794872 0.03475849] ('0.8649357167376589', '0.9323770491803278', '0.9323770491803278')
# --------------------------------------------------
# GA knn 100 1.8886693509675072
# [0.87379781 0.08828387 0.96804734 0.02096563 0.93230769 0.05083394] ('0.8606846512734581', '0.9565137059930127', '0.930327868852459')
# --------------------------------------------------
# GA knn 100 1.8934754997001373
# [0.87622086 0.07738122 0.97000131 0.01985437 0.93435897 0.04350217] ('0.8569100816064156', '0.9694974469228701', '0.9282786885245902')
# --------------------------------------------------
# GA knn 100 1.899474418576683
# [0.87640392 0.0750631  0.97526101 0.01842267 0.93435897 0.04218241] ('0.877167055361037', '0.9784080220370868', '0.9385245901639344')
# --------------------------------------------------
# GA knn 100 1.9048114088890247
# [0.8775582  0.0772424  0.97960026 0.01565062 0.93487179 0.04368316] ('0.873545260423432', '0.9811206664875034', '0.9364754098360656')
# --------------------------------------------------
# GA knn 100 1.900762848492201
# [0.86819905 0.07955639 0.98052071 0.01565135 0.92974359 0.04527947] ('0.8953697055304286', '0.9804656006449879', '0.9467213114754098')
# --------------------------------------------------
# GA knn 100 1.8977530524089667
# [0.86413218 0.09068788 0.98122814 0.01682076 0.92717949 0.05201021] ('0.8920528817818068', '0.9854793738242408', '0.944672131147541')
# --------------------------------------------------
# GA knn 100 1.898264735243645
# [0.85995403 0.09049712 0.9826693  0.01227775 0.92410256 0.05266345] ('0.824942172000179', '0.981313826928245', '0.9118852459016393')
# --------------------------------------------------
# GA knn 500, 7 neighbours 1.899474418576683
# [0.87640392 0.0750631  0.97526101 0.01842267 0.93435897 0.04218241] ('0.877167055361037', '0.9784080220370868', '0.9385245901639344')
# --------------------------------------------------
# GA knn 500, 9 neighbours 1.9048114088890247
# [0.8775582  0.0772424  0.97960026 0.01565062 0.93487179 0.04368316] ('0.873545260423432', '0.9811206664875034', '0.9364754098360656')
# --------------------------------------------------
# GA knn 500, 11 neighbours 1.900762848492201
# [0.86819905 0.07955639 0.98052071 0.01565135 0.92974359 0.04527947] ('0.8953697055304286', '0.9804656006449879', '0.9467213114754098')
# --------------------------------------------------
# GA knn 500, 13 neighbours 1.8997379276187656
# [0.86835251 0.09100684 0.98118869 0.01700467 0.92974359 0.05147655] ('0.848709985131713', '0.9789119188390217', '0.9241803278688525')
# --------------------------------------------------
# GA knn 500, 15 neighbours 1.8978569569598454
# [0.86393306 0.07709575 0.97950033 0.01589173 0.92717949 0.04428109] ('0.8335437792420599', '0.9764680193496373', '0.9159836065573771')
# --------------------------------------------------
# GA qda 100 1.9534345470490462
# [0.95556637 0.04828545 0.98645628 0.01907695 0.97692308 0.02517526] ('0.8531758384844114', '0.972352862133835', '0.9262295081967213')
# --------------------------------------------------
# GA qda 500 1.9540934257414075
# [0.95745555 0.04610066 0.98594083 0.01925039 0.97794872 0.02397676] ('0.8581805411901011', '0.9700013437248053', '0.9282786885245902')
# --------------------------------------------------
